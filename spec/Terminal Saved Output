Last login: Fri May 29 09:00:58 on console
Wang🍄 ~ --> cd ada
Wang🍄 ~/ada --> cd projects/projects-forks/C3Projects--BankAccounts/
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> atom .
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec
.F...F.

Failures:

  1) BankAccount::Account creates bank account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(200)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::Account:0x007ff1cb9ade58 @id=100, @balance=200>
     # ./spec/lib/account_spec.rb:14:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount creates savings account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(200)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::SavingsAccount:0x007ff1cc1622c0>
     # ./spec/lib/savings_account_spec.rb:14:in `block (2 levels) in <top (required)>'

Finished in 0.00662 seconds (files took 0.21972 seconds to load)
7 examples, 2 failures

Failed examples:

rspec ./spec/lib/account_spec.rb:11 # BankAccount::Account creates bank account & passes parameters correctly
rspec ./spec/lib/savings_account_spec.rb:11 # BankAccount::SavingsAccount creates savings account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  creates bank account & passes parameters correctly (FAILED - 1)
  raises ArgumentError for balance below 0
  withdraws from account properly

BankAccount::SavingsAccount
  responds to class method called new
  creates savings account & passes parameters correctly (FAILED - 2)
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account creates bank account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(200)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::Account:0x007f7fb41f2da0 @id=100, @balance=200>
     # ./spec/lib/account_spec.rb:14:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount creates savings account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(200)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::SavingsAccount:0x007f7fb419b5c8>
     # ./spec/lib/savings_account_spec.rb:14:in `block (2 levels) in <top (required)>'

Finished in 0.00502 seconds (files took 0.11354 seconds to load)
7 examples, 2 failures

Failed examples:

rspec ./spec/lib/account_spec.rb:11 # BankAccount::Account creates bank account & passes parameters correctly
rspec ./spec/lib/savings_account_spec.rb:11 # BankAccount::SavingsAccount creates savings account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  creates bank account & passes parameters correctly (FAILED - 1)
  raises ArgumentError for balance below 0
  withdraws from account properly

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance (FAILED - 2)
  creates savings account & passes parameters correctly (FAILED - 3)
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account creates bank account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(balance)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::Account:0x007fe9fb01ba48 @id=100, @balance=200>
     # ./spec/lib/account_spec.rb:14:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount expects initial balance to equal current balance
     Failure/Error: expect(new_account.initial_balance).to eq (balance)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::SavingsAccount:0x007fe9f91376e0>
     # ./spec/lib/savings_account_spec.rb:12:in `block (2 levels) in <top (required)>'

  3) BankAccount::SavingsAccount creates savings account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(balance)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::SavingsAccount:0x007fe9f912ff30>
     # ./spec/lib/savings_account_spec.rb:20:in `block (2 levels) in <top (required)>'

Finished in 0.005 seconds (files took 0.10028 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/lib/account_spec.rb:11 # BankAccount::Account creates bank account & passes parameters correctly
rspec ./spec/lib/savings_account_spec.rb:10 # BankAccount::SavingsAccount expects initial balance to equal current balance
rspec ./spec/lib/savings_account_spec.rb:17 # BankAccount::SavingsAccount creates savings account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  creates bank account & passes parameters correctly (FAILED - 1)
  raises ArgumentError for balance below 0
  withdraws from account properly

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance (FAILED - 2)
  creates savings account & passes parameters correctly (FAILED - 3)
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account creates bank account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(balance)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::Account:0x007f93e409db78 @id=100, @balance=200>
     # ./spec/lib/account_spec.rb:14:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount expects initial balance to equal current balance
     Failure/Error: expect(new_account.balance).to eq (initial_balance)
     NameError:
       undefined local variable or method `initial_balance' for #<RSpec::ExampleGroups::BankAccountSavingsAccount:0x007f93e405c7b8>
     # ./spec/lib/savings_account_spec.rb:12:in `block (2 levels) in <top (required)>'

  3) BankAccount::SavingsAccount creates savings account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(balance)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::SavingsAccount:0x007f93e4056430>
     # ./spec/lib/savings_account_spec.rb:20:in `block (2 levels) in <top (required)>'

Finished in 0.00494 seconds (files took 0.10521 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/lib/account_spec.rb:11 # BankAccount::Account creates bank account & passes parameters correctly
rspec ./spec/lib/savings_account_spec.rb:10 # BankAccount::SavingsAccount expects initial balance to equal current balance
rspec ./spec/lib/savings_account_spec.rb:17 # BankAccount::SavingsAccount creates savings account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  creates bank account & passes parameters correctly (FAILED - 1)
  raises ArgumentError for balance below 0
  withdraws from account properly

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly (FAILED - 2)
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account creates bank account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(balance)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::Account:0x007fb154820db8 @id=100, @balance=200>
     # ./spec/lib/account_spec.rb:14:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount creates savings account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(balance)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::SavingsAccount:0x007fb1540bcec8>
     # ./spec/lib/savings_account_spec.rb:20:in `block (2 levels) in <top (required)>'

Finished in 0.00434 seconds (files took 0.09709 seconds to load)
8 examples, 2 failures

Failed examples:

rspec ./spec/lib/account_spec.rb:11 # BankAccount::Account creates bank account & passes parameters correctly
rspec ./spec/lib/savings_account_spec.rb:17 # BankAccount::SavingsAccount creates savings account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  creates bank account & passes parameters correctly (FAILED - 1)
  raises ArgumentError for balance below 0
  withdraws from account properly

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account creates bank account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(200)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::Account:0x007fb0038de5e0 @id=100, @balance=200>
     # ./spec/lib/account_spec.rb:14:in `block (2 levels) in <top (required)>'

Finished in 0.00624 seconds (files took 0.11989 seconds to load)
8 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:11 # BankAccount::Account creates bank account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  creates bank account & passes parameters correctly (FAILED - 1)
  raises ArgumentError for balance below 0
  withdraws from account properly

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account creates bank account & passes parameters correctly
     Failure/Error: expect(new_account.initial_balance).to eq(200)
     NoMethodError:
       undefined method `initial_balance' for #<BankAccount::Account:0x007fc66b88bbc8 @id=100, @balance=200>
     # ./spec/lib/account_spec.rb:14:in `block (2 levels) in <top (required)>'

Finished in 0.00426 seconds (files took 0.10975 seconds to load)
8 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:11 # BankAccount::Account creates bank account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for balance below 0
  withdraws from account properly

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Finished in 0.00492 seconds (files took 0.11688 seconds to load)
9 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for balance below 0
  withdraws & deposits from account properly (FAILED - 1)

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account withdraws & deposits from account properly
     Failure/Error: expect(new_account.deposit(50)).to eq(250)
       
       expected: 250
            got: 150
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:32:in `block (2 levels) in <top (required)>'

Finished in 0.00477 seconds (files took 0.10181 seconds to load)
9 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:30 # BankAccount::Account withdraws & deposits from account properly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for balance below 0
  withdraws & deposits from account properly

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Finished in 0.00469 seconds (files took 0.11482 seconds to load)
9 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd
/Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `load': /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/spec/lib/account_spec.rb:46: syntax error, unexpected end-of-input, expecting keyword_end (SyntaxError)
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `block in load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `each'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:97:in `setup'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/exe/rspec:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `<main>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for balance below 0
  withdraws from account correctly
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Finished in 0.00559 seconds (files took 0.09867 seconds to load)
11 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd
/Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `load': /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/spec/lib/account_spec.rb:52: syntax error, unexpected keyword_end, expecting end-of-input (SyntaxError)
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `block in load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `each'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:97:in `setup'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/exe/rspec:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `<main>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd
/Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/spec/lib/account_spec.rb:28:in `<top (required)>': undefined method `it' for main:Object (NoMethodError)
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `block in load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `each'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:97:in `setup'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/exe/rspec:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `<main>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd
/Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/spec/lib/account_spec.rb:28:in `<top (required)>': undefined method `it' for main:Object (NoMethodError)
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `block in load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `each'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:97:in `setup'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/exe/rspec:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `<main>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for balance below 0
  withdraws from account correctly
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Finished in 0.00615 seconds (files took 0.10628 seconds to load)
11 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for balance below 0
  withdraws from account correctly
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Finished in 0.00516 seconds (files took 0.09858 seconds to load)
11 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> ls
README.md	lib		spec
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> ls
bank_account	bank_account.rb
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd bank_account
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> ls
account.rb		savings_account.rb
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'account.rb'
 => true 
2.2.1 :002 > new = BankAccount::Account(10,100)
NoMethodError: undefined method `Account' for BankAccount:Module
	from (irb):2
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :003 > new = BankAccount::Account.new(10,100)
 => #<BankAccount::Account:0x007fdc34090340 @id=10, @balance=100> 
2.2.1 :004 > new.withdraw(10)
 => 90 
2.2.1 :005 > new.withdraw(10)
 => 80 
2.2.1 :006 > new.withdraw(81)
 => 0 
2.2.1 :007 > new.withdraw(80)
 => 0 
2.2.1 :008 > new.withdraw(100)
 => 0 
2.2.1 :009 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'account.rb'
 => true 
2.2.1 :002 > new = BankAccount::Account.new(10,100)
 => #<BankAccount::Account:0x007fe1d489d1a0 @id=10, @balance=100> 
2.2.1 :003 > new.withdraw(100)
 => "You have insufficient funds 100 = 0" 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'account.rb'
 => true 
2.2.1 :002 > new = BankAccount::Account.new(10,100)
 => #<BankAccount::Account:0x007fc2e3055a20 @id=10, @balance=100> 
2.2.1 :003 > new.withdraw(100)
 => 0 
2.2.1 :004 > new = BankAccount::Account.new(10,100)
 => #<BankAccount::Account:0x007fc2e2176dd8 @id=10, @balance=100> 
2.2.1 :005 > new.withdraw(101)
 => "You have insufficient funds 100 = 0" 
2.2.1 :006 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'account.rb'
 => true 
2.2.1 :002 > new = BankAccount::Account.new(10,100)
 => #<BankAccount::Account:0x007fc8a207bbe8 @id=10, @balance=100> 
2.2.1 :003 > new.withdraw(101)
 => "You can't have insufficient funds. Your balance is 0" 
2.2.1 :004 > new = BankAccount::Account.new(10,-1)
ArgumentError: You can't start out with a negative balance. Add some monies
	from account.rb:11:in `initialize'
	from (irb):4:in `new'
	from (irb):4
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> cd ../..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec
...........

Finished in 0.00456 seconds (files took 0.09603 seconds to load)
11 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for balance below 0
  withdraws from account correctly
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Finished in 0.00498 seconds (files took 0.10454 seconds to load)
11 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  account balance can't go below 0 (FAILED - 1)
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account account balance can't go below 0
     Failure/Error: expect(new_account3.withdraw(201)).to eq(0)
       
       expected: 0
            got: "You can't have insufficient funds. Your balance is 0"
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:36:in `block (2 levels) in <top (required)>'

Finished in 0.00523 seconds (files took 0.09624 seconds to load)
12 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:34 # BankAccount::Account account balance can't go below 0

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  account balance can't go below 0 (FAILED - 1)
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account account balance can't go below 0
     Failure/Error: expect(new_account3.withdraw(201)).to eq(0)
       
       expected: 0
            got: "You can't have insufficient funds. Your balance is 0"
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:36:in `block (2 levels) in <top (required)>'

Finished in 0.00545 seconds (files took 0.10621 seconds to load)
12 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:34 # BankAccount::Account account balance can't go below 0

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  account balance can't go below 0 (FAILED - 1)
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account account balance can't go below 0
     Failure/Error: expect(new_account3.withdraw(201)).to eq("You overdrafted. Your balance is 0")
       
       expected: "You overdrafted. Your balance is 0"
            got: "You can't have insufficient funds. Your balance is 0"
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:36:in `block (2 levels) in <top (required)>'

Finished in 0.0054 seconds (files took 0.10262 seconds to load)
12 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:34 # BankAccount::Account account balance can't go below 0

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  account balance can't go below 0 (FAILED - 1)
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Failures:

  1) BankAccount::Account account balance can't go below 0
     Failure/Error: expect(new_account3.withdraw(201)).to eq("You can't overdraw. Your balance is 0.")
       
       expected: "You can't overdraw. Your balance is 0."
            got: "You can't overdraw. Your balance is 0"
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:36:in `block (2 levels) in <top (required)>'

Finished in 0.00615 seconds (files took 0.10342 seconds to load)
12 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:34 # BankAccount::Account account balance can't go below 0

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  account balance can't go below 0
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10

Finished in 0.00549 seconds (files took 0.10653 seconds to load)
12 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> ls
README.md	lib		spec
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> 
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> ls
bank_account	bank_account.rb
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd bank_account
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> ls
account.rb		savings_account.rb
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'account.rb'
 => true 
2.2.1 :002 > new = BankAccount::Account.new(10,100)
 => #<BankAccount::Account:0x007f8bba8a0d70 @id=10, @balance=100> 
2.2.1 :003 > new.withdraw(80)
 => 20 
2.2.1 :004 > new.withdraw(80)
 => "You can't overdraw. Your balance is 0." 
2.2.1 :005 > new.deposit(80)
 => 80 
2.2.1 :006 > new.balance
 => 80 
2.2.1 :007 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> cd ../..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  can't withdraw more than your balance
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10 (FAILED - 1)
  raises ArgumentError for initial balance below 0
  deposits to account correctly

Failures:

  1) BankAccount::SavingsAccount raises ArgumentError for balance below 10
     Failure/Error: expect {
       expected Exception with "Balance can't be below 10", got #<ArgumentError: You can't start out with a negative balance. Add some monies> with backtrace:
         # ./lib/bank_account/savings_account.rb:13:in `initialize'
         # ./spec/lib/savings_account_spec.rb:25:in `new'
         # ./spec/lib/savings_account_spec.rb:25:in `block (3 levels) in <top (required)>'
         # ./spec/lib/savings_account_spec.rb:24:in `block (2 levels) in <top (required)>'
     # ./spec/lib/savings_account_spec.rb:24:in `block (2 levels) in <top (required)>'

Finished in 0.00658 seconds (files took 0.10334 seconds to load)
14 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:23 # BankAccount::SavingsAccount raises ArgumentError for balance below 10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  can't withdraw more than your balance
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10
  deposits to account correctly

Finished in 0.00545 seconds (files took 0.10866 seconds to load)
13 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  can't withdraw more than your balance
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10 (FAILED - 1)
  deposits to account correctly

Failures:

  1) BankAccount::SavingsAccount raises ArgumentError for balance below 10
     Failure/Error: expect {
       expected Exception with "You can't start out with a balance below $10. Add some monies", got #<ArgumentError: You can't start out with a negative balance. Add some monies> with backtrace:
         # ./lib/bank_account/savings_account.rb:13:in `initialize'
         # ./spec/lib/savings_account_spec.rb:25:in `new'
         # ./spec/lib/savings_account_spec.rb:25:in `block (3 levels) in <top (required)>'
         # ./spec/lib/savings_account_spec.rb:24:in `block (2 levels) in <top (required)>'
     # ./spec/lib/savings_account_spec.rb:24:in `block (2 levels) in <top (required)>'

Finished in 0.00608 seconds (files took 0.10325 seconds to load)
13 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:23 # BankAccount::SavingsAccount raises ArgumentError for balance below 10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws from account correctly
  can't withdraw more than your balance
  deposits to account correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial balance to equal current balance
  creates savings account & passes parameters correctly
  raises ArgumentError for balance below 10
  deposits to account correctly

Finished in 0.00576 seconds (files took 0.09747 seconds to load)
13 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates bank account & passes parameters correctly
  raises ArgumentError for initial Account balance below 0
  withdraws from Account correctly
  can't withdraw more than your Account balance
  deposits to Account correctly
  returns the current Account balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for SA balance below 10
  deposits to SA correctly

Finished in 0.00596 seconds (files took 0.13105 seconds to load)
13 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for SA balance below 10
  deposits to SA correctly

Finished in 0.00563 seconds (files took 0.11635 seconds to load)
13 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for SA balance below 10
  deposits to SA correctly

Finished in 0.00563 seconds (files took 0.1165 seconds to load)
13 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly

Finished in 0.00709 seconds (files took 0.11695 seconds to load)
13 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> git status
On branch lw/master
Your branch is up-to-date with 'origin/lw/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/bank_account/account.rb
	modified:   lib/bank_account/savings_account.rb
	modified:   spec/lib/account_spec.rb
	modified:   spec/lib/savings_account_spec.rb

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	.rspec

no changes added to commit (use "git add" and/or "git commit -a")
unt.rb~/ada/projects/projects-forks/C3Projects--BankAccounts --> git add . lib/bank_account/acco 
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> git status
On branch lw/master
Your branch is up-to-date with 'origin/lw/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   .rspec
	modified:   lib/bank_account/account.rb
	modified:   lib/bank_account/savings_account.rb
	modified:   spec/lib/account_spec.rb
	modified:   spec/lib/savings_account_spec.rb

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> atom .rspec
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> git reset HEAD .rspec
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> git status
On branch lw/master
Your branch is up-to-date with 'origin/lw/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   lib/bank_account/account.rb
	modified:   lib/bank_account/savings_account.rb
	modified:   spec/lib/account_spec.rb
	modified:   spec/lib/savings_account_spec.rb

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	.rspec

. Working on Savings Account & inheriting withdraw + updated specs"
[lw/master e9e5da5] Finished Account. Working on Savings Account & inheriting withdraw + updated specs
 4 files changed, 120 insertions(+), 27 deletions(-)
 rewrite lib/bank_account/savings_account.rb (66%)
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> git push
Counting objects: 10, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (10/10), done.
Writing objects: 100% (10/10), 2.37 KiB | 0 bytes/s, done.
Total 10 (delta 1), reused 0 (delta 0)
To git@github.com:wangg131/C3Projects--BankAccounts.git
   b033185..e9e5da5  lw/master -> lw/master
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd bank_account
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'savings_account.rb'
LoadError: cannot load such file -- ./lib/bank_account/account
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	from savings_account.rb:3:in `<module:BankAccount>'
	from savings_account.rb:1:in `<top (required)>'
	from (irb):1:in `load'
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> ls
account.rb		savings_account.rb
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'savings_account.rb'
LoadError: cannot load such file -- ./lib/bank_account/account
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	from savings_account.rb:3:in `<module:BankAccount>'
	from savings_account.rb:1:in `<top (required)>'
	from (irb):1:in `load'
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'savings_account.rb'
LoadError: cannot load such file -- account
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	from savings_account.rb:3:in `<module:BankAccount>'
	from savings_account.rb:1:in `<top (required)>'
	from (irb):2:in `load'
	from (irb):2
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :003 > load 'savings_account.rb'
NameError: uninitialized constant BankAccount::Account
	from savings_account.rb:3:in `<module:BankAccount>'
	from savings_account.rb:1:in `<top (required)>'
	from (irb):3:in `load'
	from (irb):3
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'savings_account.rb'
NameError: uninitialized constant BankAccount::Account
	from savings_account.rb:3:in `<module:BankAccount>'
	from savings_account.rb:1:in `<top (required)>'
	from (irb):1:in `load'
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'savings_account.rb'
NameError: uninitialized constant BankAccount::Account
	from savings_account.rb:3:in `<module:BankAccount>'
	from savings_account.rb:1:in `<top (required)>'
	from (irb):1:in `load'
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> irb
2.2.1 :001 > load 'bank_account.rb'
LoadError: cannot load such file -- bank_account.rb
	from (irb):1:in `load'
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> ls
account.rb		savings_account.rb
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fec2c8a43a8 @id=10, @balance=100> 
2.2.1 :003 > BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fec2c88e5a8 @id=10, @balance=100> 
2.2.1 :004 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fec2c87eb30 @id=10, @balance=100> 
2.2.1 :005 > x.withdraw(10)
 => 90 
2.2.1 :006 > x.withdraw(10)
 => 80 
2.2.1 :007 > x.deposit(100)
 => 180 
2.2.1 :008 > x.withdraw(180)
 => 0 
2.2.1 :009 > x.withdraw(0)
 => 0 
2.2.1 :010 > x.withdraw(10)
 => "You can't overdraw. Your balance is 0." 
2.2.1 :011 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fec2c84fda8 @id=10, @balance=100> 
2.2.1 :012 > x.withdraw(100)
 => 0 
2.2.1 :013 > x.withdraw(101)
 => "You can't overdraw. Your balance is 0." 
2.2.1 :014 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fd0ea112598 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(101)
 => "You can't overdraw. Your balance is 0." 
2.2.1 :004 > x.withdraw(101)
 => "You can't overdraw. Your balance is 0." 
2.2.1 :005 > x.deposit(100)
 => 100 
2.2.1 :006 > x.withdraw(91)
 => 19 
2.2.1 :007 > x.withdraw(10)
 => "You can't overdraw. Your balance is 0." 
2.2.1 :008 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007ff7bc971fb0 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(10)
 => 190 
2.2.1 :004 > x.withdraw(10)
 => 170 
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fbbba0c4608 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(10)
 => 180 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fbd29162a40 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(10)
 => 90 
2.2.1 :004 > x.withdraw(90)
what
 => nil 
2.2.1 :005 > x.deposit(90)
 => 180 
2.2.1 :006 > x.withdraw(90)
 => 90 
2.2.1 :007 > x.withdraw(80)
 => 10 
2.2.1 :008 > x.withdraw(1)
 => 9 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fbd290f62f0 @id=10, @balance=100> 
2.2.1 :010 > x.withdraw(91)
 => 9 
2.2.1 :011 > x.withdraw(91)
what
 => nil 
2.2.1 :012 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x.deposit(90)
NameError: undefined local variable or method `x' for main:Object
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f8d649a8938 @id=10, @balance=100> 
2.2.1 :004 > x.withdraw(91)
 => 9 
2.2.1 :005 > x.withdraw(91)
 => "You can't overdraw. Your balance is 0." 
2.2.1 :006 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fe7291843c8 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(91)
 => 9 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f91ca0ddb68 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(91)
 => 9 
2.2.1 :004 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f91ca0bc0f8 @id=10, @balance=100> 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(10,101)
 => #<BankAccount::SavingsAccount:0x007f91ca0936d0 @id=10, @balance=101> 
2.2.1 :006 > x.withdraw(102)
 => "You can't go under $10. Your balance is 10." 
2.2.1 :007 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> ir b
-bash: ir: command not found
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fbc6a04c4e0 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(102)
 => -2 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::SavingsAccount.new(10,100)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fd5ea062f58 @id=10, @balance=100> 
2.2.1 :004 > x.withdraw(102)
 => -2 
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fe47a050378 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(102)
yay
 => nil 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f935296e618 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(102)
 => "You can't go under $10. Your balance is 100." 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> rib
-bash: rib: command not found
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::SavingsAccount.new(10,100)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fe97a8b3b28 @id=10, @balance=100> 
2.2.1 :004 > x.withdraw(102)
 => "You can't go under $10. Your balance is 10." 
2.2.1 :005 > x.deposit(2)
 => 12 
2.2.1 :006 > x.deposit(28)
 => 40 
2.2.1 :007 > x.withdraw(102)
 => "You can't go under $10. Your balance is 10." 
2.2.1 :008 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fe97a869b18 @id=10, @balance=10> 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(10,9)
ArgumentError: You can't start out with a balance below $10. Add moar monies.
	from /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account/savings_account.rb:11:in `initialize'
	from (irb):9:in `new'
	from (irb):9
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :010 > x = BankAccount::SavingsAccount.new(10,-9)
ArgumentError: You can't start out with a balance below $10. Add moar monies.
	from /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account/savings_account.rb:11:in `initialize'
	from (irb):10:in `new'
	from (irb):10
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :011 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fe97a0c1f78 @id=10, @balance=10> 
2.2.1 :012 > 
2.2.1 :013 >   
2.2.1 :014 >   x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fe97a098f38 @id=10, @balance=10> 
2.2.1 :015 > x.withdraw(0)
 => "You can't go under $10. Your balance is 10." 
2.2.1 :016 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::SavingsAccount.new(10,10)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fc161854740 @id=10, @balance=10> 
2.2.1 :004 > x.withdraw(0)
 => 10 
2.2.1 :005 > x.withdraw(1)
 => 9 
2.2.1 :006 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::SavingsAccount.new(10,10)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fe7b40d8830 @id=10, @balance=10> 
2.2.1 :004 > x.withdraw(1)
 => 9 
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007f903b9091d8 @id=10, @balance=10> 
2.2.1 :003 > x.withdraw(1)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :004 > x.balance
 => 10 
2.2.1 :005 > x.withdraw(0)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :006 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f903c80ff38 @id=10, @balance=100> 
2.2.1 :007 > x.withdraw(90)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :008 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f82dc172aa8 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(90)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :004 > wuit
NameError: undefined local variable or method `wuit' for main:Object
	from (irb):4
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::SavingsAccount.new(10,100)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fa9d3065ea8 @id=10, @balance=100> 
2.2.1 :004 > x.withdraw(90)
 => 10 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(10,11)
 => #<BankAccount::SavingsAccount:0x007fa9d3896ca8 @id=10, @balance=11> 
2.2.1 :006 > x.withdraw(2)
 => 9 
2.2.1 :007 > x.withdraw(9)
 => 0 
2.2.1 :008 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,11)
 => #<BankAccount::SavingsAccount:0x007f89f48842c8 @id=10, @balance=11> 
2.2.1 :003 > x.withdraw(9)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :004 > x.withdraw(0)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f89f4099e78 @id=10, @balance=100> 
2.2.1 :006 > x.withdraw(10)
 => 90 
2.2.1 :007 > x.withdraw(80)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :008 > x.withdraw(80)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :009 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f92cc90d498 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(80)
 => 20 
2.2.1 :004 > x.withdraw(80)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f92cc8cfa80 @id=10, @balance=100> 
2.2.1 :006 > x.withdraw(90)
 => 10 
2.2.1 :007 > x.withdraw(0)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :008 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f92cc8a4b78 @id=10, @balance=100> 
2.2.1 :009 > x.withdraw(91)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :010 > x.withdraw(91)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :011 > x.withdraw(0)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :012 > qui
NameError: undefined local variable or method `qui' for main:Object
	from (irb):12
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :013 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007fd0bb09fd60 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(0)
 => 100 
2.2.1 :004 > x.withdraw(100)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(10,11)
 => #<BankAccount::SavingsAccount:0x007fd0bb009a90 @id=10, @balance=11> 
2.2.1 :006 > x.withdraw(0)
 => 11 
2.2.1 :007 > x.withdraw(2)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :008 > x.deposit(2)
 => 12 
2.2.1 :009 > x.withdraw(2)
 => 10 
2.2.1 :010 > qiut
NameError: undefined local variable or method `qiut' for main:Object
	from (irb):10
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :011 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly

Finished in 0.00572 seconds (files took 0.09774 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  creates Savings Account & passes parameters correctly (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount creates Savings Account & passes parameters correctly
     Failure/Error: expect(new_account4.withdraw(10)).to eq(10)
       
       expected: 10
            got: "You can't go under $10. Your balance is staying at $10."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:36:in `block (2 levels) in <top (required)>'

Finished in 0.00602 seconds (files took 0.0993 seconds to load)
14 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:34 # BankAccount::SavingsAccount creates Savings Account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> ls
bank_account	bank_account.rb
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fe17407ae10 @id=10, @balance=20> 
2.2.1 :003 > x.withdraw(10)
 => 10 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  creates Savings Account & passes parameters correctly (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount creates Savings Account & passes parameters correctly
     Failure/Error: expect(new_account4.withdraw(10)).to eq(10)
       
       expected: 10
            got: "You can't go under $10. Your balance is staying at $10."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:36:in `block (2 levels) in <top (required)>'

Finished in 0.00561 seconds (files took 0.10819 seconds to load)
14 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:34 # BankAccount::SavingsAccount creates Savings Account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  creates Savings Account & passes parameters correctly (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount creates Savings Account & passes parameters correctly
     Failure/Error: expect(new_account4.withdraw(11)).to eq("You can't go under $10. Your balance is staying at $10.")
       
       expected: "You can't go under $10. Your balance is staying at $10."
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:37:in `block (2 levels) in <top (required)>'

Finished in 0.00706 seconds (files took 0.10144 seconds to load)
14 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:34 # BankAccount::SavingsAccount creates Savings Account & passes parameters correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  creates Savings Account & passes parameters correctly

Finished in 0.00565 seconds (files took 0.09835 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> quit
-bash: quit: command not found
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd ..
Wang🍄 ~/ada/projects/projects-forks --> cd C3Projects--BankAccounts/lib/
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fbc1a017d30 @id=10, @balance=20> 
2.2.1 :003 > x.withdraw(10)
 => 10 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly

Finished in 0.00615 seconds (files took 0.10017 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::Account.new(10,20)
 => #<BankAccount::Account:0x007f98a9128588 @id=10, @balance=20> 
2.2.1 :003 > x.withdraw(10)
 => 10 
2.2.1 :004 > x.withdraw(10)
 => 0 
2.2.1 :005 > x.withdraw(10)
 => "You can't overdraw. Your balance is 0." 
2.2.1 :006 > x = BankAccount::Account.new(10,20)
 => #<BankAccount::Account:0x007f98a9091980 @id=10, @balance=20> 
2.2.1 :007 > x.withdraw(20)
 => 0 
2.2.1 :008 > x = BankAccount::Account.new(10,20)
 => #<BankAccount::Account:0x007f98a9072300 @id=10, @balance=20> 
2.2.1 :009 > x.withdraw(0)
 => 20 
2.2.1 :010 > x = BankAccount::Account.new(10,0)
 => #<BankAccount::Account:0x007f98a9058ba8 @id=10, @balance=0> 
2.2.1 :011 > x.withdraw(0)
 => 0 
2.2.1 :012 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f98a9030f18 @id=10, @balance=20> 
2.2.1 :013 > x.withdraw(0)
 => 20 
2.2.1 :014 > x.withdraw(10)
 => 10 
2.2.1 :015 > x.withdraw(10)
 => 10 
2.2.1 :016 > x.withdraw(10)
 => 10 
2.2.1 :017 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fb251107df8 @id=10, @balance=20> 
2.2.1 :003 > x.withdraw(10)
 => 10 
2.2.1 :004 > x.withdraw(10)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fb25107db58 @id=10, @balance=20> 
2.2.1 :006 > x.withdraw(11)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :007 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fb25105da60 @id=10, @balance=10> 
2.2.1 :008 > x.withdraw(0)
 => 10 
2.2.1 :009 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fbbe482e3d8 @id=10, @balance=10> 
2.2.1 :003 > x.withdraw(0)
 => 10 
2.2.1 :004 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fbbe3878f38 @id=10, @balance=20> 
2.2.1 :005 > x.withdraw(0)
 => 20 
2.2.1 :006 > x = BankAccount::SavingsAccount.new(10,2)
ArgumentError: You can't start out with a balance below $10. Add moar monies.
	from /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account/savings_account.rb:11:in `initialize'
	from (irb):6:in `new'
	from (irb):6
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :007 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fbbe383bf70 @id=10, @balance=20> 
2.2.1 :008 > x.withdraw(2)
 => 20 
2.2.1 :009 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::SavingsAccount.new(10,20)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fccaa06f238 @id=10, @balance=20> 
2.2.1 :004 > x.withdraw(2)
 => 18 
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fdcfa062be0 @id=10, @balance=20> 
2.2.1 :003 > x.withdraw(2)
 => 16 
2.2.1 :004 > x.withdraw(6)
 => 8 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fdcfa869b68 @id=10, @balance=20> 
2.2.1 :006 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fdcfa853cf0 @id=10, @balance=10> 
2.2.1 :007 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fdcfa8416b8 @id=10, @balance=20> 
2.2.1 :008 > x.withdraw(11)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fdcfa820c38 @id=10, @balance=20> 
2.2.1 :010 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fdcfa803ef8 @id=10, @balance=10> 
2.2.1 :011 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fdcfa034e20 @id=10, @balance=20> 
2.2.1 :012 > x.withdraw(10)
 => 8 
2.2.1 :013 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f98a393fbc8 @id=10, @balance=20> 
2.2.1 :003 > x.withdraw(10)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :004 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f98a391d988 @id=10, @balance=20> 
2.2.1 :005 > x.withdraw(2)
 => 18 
2.2.1 :006 > x.withdraw(9)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :007 > x.balance
 => 10 
2.2.1 :008 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f98a38f4038 @id=10, @balance=20> 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007f98a38dd5b8 @id=10, @balance=10> 
2.2.1 :010 > x = BankAccount::SavingsAccount.new(10,0)
ArgumentError: You can't start out with a balance below $10. Add moar monies.
	from /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account/savings_account.rb:11:in `initialize'
	from (irb):10:in `new'
	from (irb):10
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :011 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f98a38ac1c0 @id=10, @balance=20> 
2.2.1 :012 > x.withdraw(9)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :013 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f98a3823938 @id=10, @balance=20> 
2.2.1 :014 > x.withdraw(20)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :015 > x.balance
 => 10 
2.2.1 :016 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f98a3073940 @id=10, @balance=20> 
2.2.1 :017 > x.withdraw(2)
 => 18 
2.2.1 :018 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::SavingsAccount.new(10,20)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f819c8710e8 @id=10, @balance=20> 
2.2.1 :004 > x.withdraw(2)
 => 16 
2.2.1 :005 > x.withdraw(6)
 => 12 
2.2.1 :006 > x.balance
 => 20 
2.2.1 :007 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f819c82c470 @id=10, @balance=20> 
2.2.1 :008 > x.withdraw(6)
 => 12 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f819c80c6e8 @id=10, @balance=20> 
2.2.1 :010 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007f819c059c48 @id=10, @balance=10> 
2.2.1 :011 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f819c0408d8 @id=10, @balance=20> 
2.2.1 :012 > x.withdraw(10)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :013 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f819b0a3718 @id=10, @balance=20> 
2.2.1 :014 > x.withdraw(18)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :015 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f819b080f60 @id=10, @balance=20> 
2.2.1 :016 > x.withdraw(8)
 => 10 
2.2.1 :017 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f819b060da0 @id=10, @balance=20> 
2.2.1 :018 > x.withdraw(0)
 => 20 
2.2.1 :019 > x.withdraw(2)
 => 16 
2.2.1 :020 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007faa4c09a7b0 @id=10, @balance=20> 
2.2.1 :003 > x.withdraw(0)
 => 18 
2.2.1 :004 > x.withdraw(8)
 => 10 
2.2.1 :005 > x.withdraw(8)
 => 10 
2.2.1 :006 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007faa4c07be28 @id=10, @balance=20> 
2.2.1 :007 > x.withdraw(8)
 => 10 
2.2.1 :008 > x.withdraw(8)
 => 10 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007faa4c8f68c8 @id=10, @balance=20> 
2.2.1 :010 > x.withdraw(9)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :011 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007faa4c8cec38 @id=10, @balance=20> 
2.2.1 :012 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007faa4c8bef40 @id=10, @balance=10> 
2.2.1 :013 > x.withdraw(0)
 => 8 
2.2.1 :014 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007f8efd04e1b8 @id=10, @balance=10> 
2.2.1 :003 > x.withdraw(0)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :004 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f8efd02c6f8 @id=10, @balance=20> 
2.2.1 :005 > x.withdraw(8)
 => 10 
2.2.1 :006 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f8efc91d628 @id=10, @balance=20> 
2.2.1 :007 > x.withdraw(9)
 => "You can't go under $10. Your balance is staying at $10." 
2.2.1 :008 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f8efc8fed90 @id=10, @balance=20> 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007f8efc8ed0e0 @id=10, @balance=20> 
2.2.1 :010 > x.withdraw(0)
 => 18 
2.2.1 :011 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly
     Failure/Error: expect(new_account4.withdraw(9)).to eq(10)
       
       expected: 10
            got: "You can't go under $10. Your balance is staying at $10."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:37:in `block (2 levels) in <top (required)>'

Finished in 0.0062 seconds (files took 0.09917 seconds to load)
14 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:34 # BankAccount::SavingsAccount withdraws from SA correctly

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly

Finished in 0.00599 seconds (files took 0.10521 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00549 seconds (files took 0.09872 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007f90f48104c0 @id=10, @balance=10> 
2.2.1 :003 > x.withdraw(0)
You can't go under $10. Your balance is staying at $10.
 => 10 
2.2.1 :004 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007f90f407bca0 @id=10, @balance=10> 
2.2.1 :005 > x.withdraw(1)
You can't go under $10. Your balance is staying at $10.
 => 10 
2.2.1 :006 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00579 seconds (files took 0.09751 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::Account.new(10,10)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::Account.new(10,10)
 => #<BankAccount::Account:0x007ffe83874748 @id=10, @balance=10> 
2.2.1 :004 > x.withdraw(1)
 => 9 
2.2.1 :005 > x.withdraw(9)
 => 0 
2.2.1 :006 > x.withdraw(9)
You can't overdraw. Your balance is 0.
 => 0 
2.2.1 :007 > x = BankAccount::Account.new(10,10)
 => #<BankAccount::Account:0x007ffe83829bf8 @id=10, @balance=10> 
2.2.1 :008 > x.withdraw(10)
 => 0 
2.2.1 :009 > x = BankAccount::Account.new(10,10)
 => #<BankAccount::Account:0x007ffe84855ce8 @id=10, @balance=10> 
2.2.1 :010 > x.withdraw(11)
You can't overdraw. Your balance is 10.
 => 10 
2.2.1 :011 > x = BankAccount::Account.new(10,100)
 => #<BankAccount::Account:0x007ffe8482edf0 @id=10, @balance=100> 
2.2.1 :012 > x.withdraw(101)
You can't overdraw. Your balance is 100.
 => 100 
2.2.1 :013 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00586 seconds (files took 0.10008 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00561 seconds (files took 0.11274 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f90f382a4c0 @id=10, @balance=100> 
2.2.1 :003 > x.withdraw(88)
 => 10 
2.2.1 :004 > x = BankAccount::SavingsAccount.new(10,100)
 => #<BankAccount::SavingsAccount:0x007f90f20a21b8 @id=10, @balance=100> 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007f90f2090698 @id=10, @balance=10> 
2.2.1 :006 > x.withdraw(0)
You can't go under $10. Your balance is staying at $10.
 => 10 
2.2.1 :007 > x = BankAccount::SavingsAccount.new(10,12)
 => #<BankAccount::SavingsAccount:0x007f90f20702d0 @id=10, @balance=12> 
2.2.1 :008 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007f90f205a8e0 @id=10, @balance=10> 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(10,12)
 => #<BankAccount::SavingsAccount:0x007f90f2041e58 @id=10, @balance=12> 
2.2.1 :010 > x.withdraw(2)
You can't go under $10. Your balance is staying at $12.
 => 12 
2.2.1 :011 > x = BankAccount::SavingsAccount.new(10,12)
 => #<BankAccount::SavingsAccount:0x007f90f2028548 @id=10, @balance=12> 
2.2.1 :012 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fc2818a1380 @id=10, @balance=10> 
2.2.1 :003 > x.add_interest(10)
 => 1 
2.2.1 :004 > x.balance
 => 10 
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> irb
2.2.1 :001 > load 'bank_account.rb'
LoadError: cannot load such file -- bank_account.rb
	from (irb):1:in `load'
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > qiut
NameError: undefined local variable or method `qiut' for main:Object
	from (irb):2
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :003 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> ls
README.md	lib		spec
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> ls
bank_account	bank_account.rb
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007ff013800a10 @id=10, @balance=10> 
2.2.1 :003 > x.add_interest(10)
NoMethodError: undefined method `balance=' for #<BankAccount::SavingsAccount:0x007ff013800a10>
	from /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/lib/bank_account/savings_account.rb:34:in `add_interest'
	from (irb):3
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fdec2055980 @id=10, @balance=10> 
2.2.1 :003 > x.add_interest(10)
 => 1 
2.2.1 :004 > x.balance
 => 11 
2.2.1 :005 > x.balance
 => 11 
2.2.1 :006 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10

Finished in 0.00604 seconds (files took 0.09894 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class

  withdraws from SA correctly without going under $10

Finished in 0.00654 seconds (files took 0.10274 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class

You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00914 seconds (files took 0.11171 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec 
......You can't overdraw. Your balance is still 200.
.......
You can't go under $10. Your balance is staying at $20.
.

Finished in 0.00555 seconds (files took 0.0955 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
false
true
false
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00587 seconds (files took 0.10162 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
false
true
false
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00666 seconds (files took 0.10727 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
withdraw false
withdraw false
withdraw false
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00676 seconds (files took 0.11304 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00681 seconds (files took 0.10896 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10

Deprecation Warnings:

Using `any_instance` from rspec-mocks' old `:should` syntax without explicitly enabling the syntax is deprecated. Use the new `:expect` syntax or explicitly enable `:should` instead. Called from /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/spec/lib/savings_account_spec.rb:41:in `block (2 levels) in <top (required)>'.


If you need more of the backtrace for any of these deprecations to
identify where to make the necessary changes, you can configure
`config.raise_errors_for_deprecations!`, and it will turn the
deprecation warnings into errors, giving you the full backtrace.

1 deprecation warning total

Finished in 0.02863 seconds (files took 0.10093 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00677 seconds (files took 0.11595 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: silence_stream(STDOUT) do
     NoMethodError:
       undefined method `silence_stream' for #<RSpec::ExampleGroups::BankAccountSavingsAccount:0x007f94eb89e1d0>
     # ./spec/lib/savings_account_spec.rb:35:in `block (2 levels) in <top (required)>'

Finished in 0.00565 seconds (files took 0.10718 seconds to load)
14 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:34 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
You can't overdraw. Your balance is still 200.
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
You can't go under $10. Your balance is staying at $20.
  withdraws from SA correctly without going under $10

Finished in 0.00495 seconds (files took 0.10486 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10

Finished in 0.00716 seconds (files took 0.10738 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd
/Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/hooks.rb:587:in `extract_scope_from': You must explicitly give a scope (example, context) or scope alias (each, all) when using symbols as metadata for a hook. (ArgumentError)
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/hooks.rb:574:in `scope_and_options_from'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/hooks.rb:445:in `register'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/hooks.rb:198:in `before'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1464:in `before'
	from /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/spec/lib/savings_account_spec.rb:7:in `block in <top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core.rb:101:in `configure'
	from /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/spec/lib/savings_account_spec.rb:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `block in load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `each'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:97:in `setup'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/exe/rspec:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `<main>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10

Finished in 0.0074 seconds (files took 0.11145 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10

Finished in 0.00608 seconds (files took 0.10813 seconds to load)
14 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the 10% interest from balance
     Failure/Error: expect(new_account5.add_interest(10)).to eq(1)
       
       expected: 1
            got: 2
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:58:in `block (2 levels) in <top (required)>'

Finished in 0.0084 seconds (files took 0.12315 seconds to load)
15 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:56 # BankAccount::SavingsAccount returns the 10% interest from balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> quit
-bash: quit: command not found
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,10)
 => #<BankAccount::SavingsAccount:0x007fad1b8dd270 @id=10, @balance=10> 
2.2.1 :003 > x.add_interest(10)
 => 1 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance

Finished in 0.00633 seconds (files took 0.11137 seconds to load)
15 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the current balance after each withdraw/deposit (FAILED - 1)
  returns the 10% interest from balance

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.withdraw(8)).to eq(10)
       
       expected: 10
            got: 12
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:58:in `block (2 levels) in <top (required)>'

Finished in 0.00666 seconds (files took 0.10288 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:57 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the current balance after each withdraw/deposit (FAILED - 1)
  returns the 10% interest from balance

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:59:in `block (2 levels) in <top (required)>'

Finished in 0.00804 seconds (files took 0.10104 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:57 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd
/Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `load': /Users/Wang/Ada/projects/projects-forks/C3Projects--BankAccounts/spec/lib/savings_account_spec.rb:67: syntax error, unexpected keyword_end, expecting '}' (SyntaxError)
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `block in load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `each'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `load_spec_files'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:97:in `setup'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/exe/rspec:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `<main>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the current balance after each withdraw/deposit (FAILED - 1)
  returns the 10% interest from balance

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:59:in `block (2 levels) in <top (required)>'

Finished in 0.00816 seconds (files took 0.0995 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:57 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the current balance after each withdraw/deposit (FAILED - 1)
  returns the 10% interest from balance

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:59:in `block (2 levels) in <top (required)>'

Finished in 0.00825 seconds (files took 0.10539 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:57 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the current balance after each withdraw/deposit (FAILED - 2)
  returns the 10% interest from balance

Failures:

  1) BankAccount::Account returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account4.deposit(50)).to eq(250)
       
       expected: 250
            got: 150
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:46:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:59:in `block (2 levels) in <top (required)>'

Finished in 0.00658 seconds (files took 0.09903 seconds to load)
16 examples, 2 failures

Failed examples:

rspec ./spec/lib/account_spec.rb:44 # BankAccount::Account returns the current balance after each withdraw/deposit
rspec ./spec/lib/savings_account_spec.rb:57 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00767 seconds (files took 0.10611 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00822 seconds (files took 0.10784 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> quit
-bash: quit: command not found
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fd959800bd0 @id=10, @balance=20> 
2.2.1 :003 > x.withdraw(8)
 => 10 
2.2.1 :004 > x.deposit(50)
 => 70 
2.2.1 :005 > x.deposit(50)
 => 120 
2.2.1 :006 > x = BankAccount::SavingsAccount.new(10,20)
 => #<BankAccount::SavingsAccount:0x007fd9588780a0 @id=10, @balance=20> 
2.2.1 :007 > x.deposit(50)
 => 70 
2.2.1 :008 > x.deposit(50)
 => 120 
2.2.1 :009 > x.withdraw(8)
 => 110 
2.2.1 :010 > x.withdraw(8)
 => 110 
2.2.1 :011 > x.withdraw(8)
 => 110 
2.2.1 :012 > x.withdraw(8)
 => 110 
2.2.1 :013 > x.withdraw(10)
 => 108 
2.2.1 :014 > x.withdraw(10)
 => 108 
2.2.1 :015 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> rspec -fd
No examples found.

Finished in 0.00025 seconds (files took 0.06382 seconds to load)
0 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd ..
Wang🍄 ~/ada/projects/projects-forks --> cd C3Projects--BankAccounts/
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(0)).to eq(18)
       
       expected: 18
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:52:in `block (2 levels) in <top (required)>'

Finished in 0.00759 seconds (files took 0.12194 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(0)).to eq(18)
       
       expected: 18
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:52:in `block (2 levels) in <top (required)>'

Finished in 0.00688 seconds (files took 0.12338 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(0)).to eq(18)
       
       expected: 18
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:52:in `block (2 levels) in <top (required)>'

Finished in 0.00779 seconds (files took 0.12529 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00711 seconds (files took 0.10677 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 2)

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(9)).to eq(20)
       
       expected: 20
            got: 18
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:53:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00816 seconds (files took 0.11166 seconds to load)
16 examples, 2 failures

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10
rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 2)

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(9)).to eq(20)
       
       expected: 20
            got: 18
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:53:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00676 seconds (files took 0.12603 seconds to load)
16 examples, 2 failures

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10
rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00707 seconds (files took 0.10757 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00863 seconds (files took 0.12426 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00793 seconds (files took 0.12454 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00695 seconds (files took 0.11049 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdraw/deposit
     Failure/Error: expect(new_account6.deposit(50)).to eq(60)
       
       expected: 60
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:64:in `block (2 levels) in <top (required)>'

Finished in 0.00762 seconds (files took 0.11978 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:62 # BankAccount::SavingsAccount returns the current balance after each withdraw/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> quit
-bash: quit: command not found
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib/
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007fcd8b8add00 @id=100, @balance=20> 
2.2.1 :003 > x.withdraw(8)
 => 10 
2.2.1 :004 > x.deposit(50)
 => 70 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007fcd8b87fdb0 @id=100, @balance=20> 
2.2.1 :006 > x.deposit(50)
 => 70 
2.2.1 :007 > x.withdraw(20)
 => 48 
2.2.1 :008 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007fcd8b854cc8 @id=100, @balance=20> 
2.2.1 :009 > x.withdraw(8)
 => 10 
2.2.1 :010 > x.deposit(50)
 => 70 
2.2.1 :011 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007fcd8c07b870 @id=100, @balance=20> 
2.2.1 :012 > x.deposit(50)
 => 70 
2.2.1 :013 > x.withdraw(8)
 => 60 
2.2.1 :014 > x = BankAccount::SavingsAccount.new(100,34)
 => #<BankAccount::SavingsAccount:0x007fcd8c04a900 @id=100, @balance=34> 
2.2.1 :015 > x.withdraw(8)
 => 24 
2.2.1 :016 > x.deposit(50)
 => 84 
2.2.1 :017 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(0)).to eq(18)
       
       expected: 18
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:52:in `block (2 levels) in <top (required)>'

Finished in 0.00812 seconds (files took 0.11793 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(0)).to eq(18)
       
       expected: 18
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:52:in `block (2 levels) in <top (required)>'

Finished in 0.00677 seconds (files took 0.11552 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(0)).to eq(18)
       
       expected: 18
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:52:in `block (2 levels) in <top (required)>'

Finished in 0.00734 seconds (files took 0.13066 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007f9bae02e120 @id=100, @balance=20> 
2.2.1 :003 > x.withdraw(8)
 => 10 
2.2.1 :004 > x.withdraw(0)
You can't go under $10. Your balance is staying at $10.
 => 10 
2.2.1 :005 > x.withdraw(0)
You can't go under $10. Your balance is staying at $10.
 => 10 
2.2.1 :006 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(9)).to eq(20)
       
       expected: 20
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:53:in `block (2 levels) in <top (required)>'

Finished in 0.00854 seconds (files took 0.1185 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd\
> quit
/Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/formatters.rb:171:in `find_formatter': Formatter 'dquit' unknown - maybe you meant 'documentation' or 'progress'?. (ArgumentError)
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/formatters.rb:130:in `add'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:707:in `add_formatter'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration_options.rb:115:in `block in load_formatters_into'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration_options.rb:115:in `each'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration_options.rb:115:in `load_formatters_into'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration_options.rb:24:in `configure'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:96:in `setup'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/exe/rspec:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `<main>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fdquit
/Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/formatters.rb:171:in `find_formatter': Formatter 'dquit' unknown - maybe you meant 'documentation' or 'progress'?. (ArgumentError)
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/formatters.rb:130:in `add'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:707:in `add_formatter'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration_options.rb:115:in `block in load_formatters_into'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration_options.rb:115:in `each'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration_options.rb:115:in `load_formatters_into'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/configuration_options.rb:24:in `configure'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:96:in `setup'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in `run'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/gems/rspec-core-3.2.3/exe/rspec:4:in `<top (required)>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `load'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/rspec:23:in `<main>'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /Users/Wang/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10 (FAILED - 1)
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account4.withdraw(9)).to eq(20)
       
       expected: 20
            got: 10
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:53:in `block (2 levels) in <top (required)>'

Finished in 0.00646 seconds (files took 0.11353 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:50 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Finished in 0.00804 seconds (files took 0.12281 seconds to load)
16 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Finished in 0.00801 seconds (files took 0.11938 seconds to load)
16 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007fca2a0d0e48 @id=100, @balance=20> 
2.2.1 :003 > x.withdraw(0)
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
 => 18 
2.2.1 :004 > x.withdraw(10)
You can't go under $10. Your balance is staying at $18.
 => 18 
2.2.1 :005 > x.withdraw(2)
 => 14 
2.2.1 :006 > x.withdraw(2)
 => 10 
2.2.1 :007 > x.deposit(2)
 => 12 
2.2.1 :008 > x.deposit(3)
 => 15 
2.2.1 :009 > x.withdraw(3)
 => 10 
2.2.1 :010 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance (FAILED - 1)
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Failures:

  1) BankAccount::Account expects initial balance to equal current balance
     Failure/Error: expect(account200.balance).to eq (200)
     NameError:
       undefined local variable or method `account200' for #<RSpec::ExampleGroups::BankAccountAccount:0x007fdfc9866900>
     # ./spec/lib/account_spec.rb:12:in `block (2 levels) in <top (required)>'

Finished in 0.00701 seconds (files took 0.11909 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:11 # BankAccount::Account expects initial balance to equal current balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  deposits correctly
  withdraws correctly
  can't withdraw more than your current balance
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  deposits to SA correctly by inheriting method from Account base class
  withdraws from SA correctly without going under $10
  returns the 10% interest from balance
  returns the current balance after each withdraw/deposit

Finished in 0.0094 seconds (files took 0.12885 seconds to load)
16 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> load 'bank_account.rb'
-bash: load: command not found
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007ff06916d918 @id=100, @balance=20> 
2.2.1 :003 > x.withdraw(20)
You can't go under $10. Your balance is staying at $20.
 => 20 
2.2.1 :004 > x.withdraw(10)
You can't go under $10. Your balance is staying at $20.
 => 20 
2.2.1 :005 > x.withdraw(8)
 => 10 
2.2.1 :006 > x.deposit(8)
 => 18 
2.2.1 :007 > x.withdraw(0)
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
 => 16 
2.2.1 :008 > x.withdraw(0)
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
 => 14 
2.2.1 :009 > x.withdraw(0)
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
 => 12 
2.2.1 :010 > x.withdraw(0)
You actually didn't withdraw any money. Still chargin ya $2. Sorrynotsorry.
 => 10 
2.2.1 :011 > x.withdraw(0)
You can't go under $10. Your balance is staying at $10.
 => 10 
2.2.1 :012 > x.deposit(0)
 => 10 
2.2.1 :013 > x.deposit(10)
 => 20 
2.2.1 :014 > x.add_interest(10)
 => 2 
2.2.1 :015 > x.balance
 => 22 
2.2.1 :016 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007fe4028c2380 @id=100, @balance=20> 
2.2.1 :003 > x.add_interest(10)
 => "Your interest rate to be added is 2. Call balance to see updated balance." 
2.2.1 :004 > x.balance
 => 22 
2.2.1 :005 > x.add_interest(10)
 => "Your interest rate to be added is 2. Call balance to see updated balance." 
2.2.1 :006 > x.balance
 => 24 
2.2.1 :007 > x = BankAccount::SavingsAccount.new(100,23)
 => #<BankAccount::SavingsAccount:0x007fe402890470 @id=100, @balance=23> 
2.2.1 :008 > x.add_interest(10)
 => "Your interest rate to be added is 2. Call balance to see updated balance." 
2.2.1 :009 > x.balance
 => 25 
2.2.1 :010 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly without going under $0 (FAILED - 1)
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws from SA correctly without going under $10
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance (FAILED - 2)

Failures:

  1) BankAccount::Account withdraws correctly without going under $0
     Failure/Error: expect(new_account20.withdraw(20)).to eq(20)
       
       expected: 20
            got: 0
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:29:in `block (2 levels) in <top (required)>'

  2) BankAccount::SavingsAccount returns the 10% interest from balance
     Failure/Error: expect(new_account.add_interest(10)).to eq(1)
       
       expected: 1
            got: "Your interest rate to be added is $1. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:61:in `block (2 levels) in <top (required)>'

Finished in 0.00807 seconds (files took 0.14725 seconds to load)
17 examples, 2 failures

Failed examples:

rspec ./spec/lib/account_spec.rb:28 # BankAccount::Account withdraws correctly without going under $0
rspec ./spec/lib/savings_account_spec.rb:59 # BankAccount::SavingsAccount returns the 10% interest from balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly without going under $0 (FAILED - 1)
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws from SA correctly without going under $10
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance

Failures:

  1) BankAccount::Account withdraws correctly without going under $0
     Failure/Error: expect(new_account20.withdraw(20)).to eq(20)
       
       expected: 20
            got: 0
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:29:in `block (2 levels) in <top (required)>'

Finished in 0.00811 seconds (files took 0.12331 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:28 # BankAccount::Account withdraws correctly without going under $0

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly without going under $0 (FAILED - 1)
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws from SA correctly without going under $10
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance

Failures:

  1) BankAccount::Account withdraws correctly without going under $0
     Failure/Error: expect(new_account20.withdraw(0)).to eq(10)
       
       expected: 10
            got: 0
       
       (compared using ==)
     # ./spec/lib/account_spec.rb:30:in `block (2 levels) in <top (required)>'

Finished in 0.007 seconds (files took 0.12997 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/account_spec.rb:28 # BankAccount::Account withdraws correctly without going under $0

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly without going under $0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws from SA correctly without going under $10
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance

Finished in 0.00817 seconds (files took 0.12193 seconds to load)
17 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  can't withdraw if balance will be below 0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws from SA correctly without going under $10
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance

Finished in 0.00655 seconds (files took 0.13028 seconds to load)
17 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw/deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws from SA correctly without going under $10
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance

Finished in 0.00642 seconds (files took 0.12157 seconds to load)
16 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws from SA correctly without going under $10
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance

Finished in 0.00827 seconds (files took 0.13174 seconds to load)
16 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws from SA correctly without going under $10 (FAILED - 1)
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance

Failures:

  1) BankAccount::SavingsAccount withdraws from SA correctly without going under $10
     Failure/Error: expect(new_account200.withdraw(220)).to eq(218)
       
       expected: 218
            got: 200
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:45:in `block (2 levels) in <top (required)>'

Finished in 0.0076 seconds (files took 0.13257 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:44 # BankAccount::SavingsAccount withdraws from SA correctly without going under $10

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  if balance goes below 10 with withdrawal, returns unmodified balance (FAILED - 1)
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdraw/deposit
  returns the 10% interest from balance

Failures:

  1) BankAccount::SavingsAccount if balance goes below 10 with withdrawal, returns unmodified balance
     Failure/Error: expect(new_account200.withdraw(220)).to eq(220)
       
       expected: 220
            got: 200
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:45:in `block (2 levels) in <top (required)>'

Finished in 0.0071 seconds (files took 0.10967 seconds to load)
16 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:44 # BankAccount::SavingsAccount if balance goes below 10 with withdrawal, returns unmodified balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the 10% interest from balance

Finished in 0.0087 seconds (files took 0.10739 seconds to load)
16 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance (FAILED - 1)
  updated balance after adding interest

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: "Your interest rate to be added is $22. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00738 seconds (files took 0.1143 seconds to load)
18 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance
  updated balance after adding interest

Finished in 0.00905 seconds (files took 0.12597 seconds to load)
18 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit (FAILED - 1)
  returns the interest from balance
  updated balance after adding interest

Failures:

  1) BankAccount::SavingsAccount returns the current balance after each withdrawal/deposit
     Failure/Error: expect(new_account20.deposit(50)).to eq(150)
       
       expected: 150
            got: 70
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:58:in `block (2 levels) in <top (required)>'

Finished in 0.00727 seconds (files took 0.13194 seconds to load)
18 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:56 # BankAccount::SavingsAccount returns the current balance after each withdrawal/deposit

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance
  updated balance after adding interest

Finished in 0.00717 seconds (files took 0.11084 seconds to load)
18 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance
  updated balance after adding interest

Finished in 0.00949 seconds (files took 0.13179 seconds to load)
18 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance
  updated balance after adding interest (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount updated balance after adding interest
     Failure/Error: expect(new_account20.add_interest(10)).to eq("Your interest rate to be added is $1. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $1. Call balance to see updated balance."
            got: "Your interest rate to be added is $2. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:66:in `block (2 levels) in <top (required)>'

Finished in 0.00767 seconds (files took 0.11806 seconds to load)
18 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:65 # BankAccount::SavingsAccount updated balance after adding interest

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance
  updated balance after adding interest

Finished in 0.00805 seconds (files took 0.13794 seconds to load)
18 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: "Your interest rate to be added is $22. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00715 seconds (files took 0.11693 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: "Your interest rate to be added is $0. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00696 seconds (files took 0.12066 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: "Your interest rate to be added is $0. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00731 seconds (files took 0.1272 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: "Your interest rate to be added is $0. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00726 seconds (files took 0.11223 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: "Your interest rate to be added is $22. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00929 seconds (files took 0.10971 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
     NameError:
       undefined local variable or method `interest_balance' for #<BankAccount::SavingsAccount:0x007f94f210dab8>
     # ./lib/bank_account/savings_account.rb:37:in `add_interest'
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.01066 seconds (files took 0.12936 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
     NameError:
       undefined local variable or method `interest_balance' for #<BankAccount::SavingsAccount:0x007fe08b89adf0>
     # ./lib/bank_account/savings_account.rb:37:in `add_interest'
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00696 seconds (files took 0.12121 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
     TypeError:
       Array can't be coerced into Fixnum
     # ./lib/bank_account/savings_account.rb:37:in `+'
     # ./lib/bank_account/savings_account.rb:37:in `add_interest'
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00742 seconds (files took 0.1209 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: 200
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00832 seconds (files took 0.12131 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: "Your interest rate to be added is $0. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00838 seconds (files took 0.11723 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(10)).to eq("Your interest rate to be added is $20. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $20. Call balance to see updated balance."
            got: "Your interest rate to be added is $0. Call balance to see updated balance."
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00716 seconds (files took 0.1256 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007f91a203d398 @id=100, @balance=200> 
2.2.1 :003 > x.add_interest(10)
 => 0 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007fe1ed864350 @id=100, @balance=200> 
2.2.1 :003 > x.add_interest(10)
 => 0 
2.2.1 :004 > x.add_interest(10)
 => 0 
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007fd4b58711d0 @id=100, @balance=200> 
2.2.1 :003 > x.add_interest(10)
 => 0 
2.2.1 :004 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007ff304025e78 @id=100, @balance=200> 
2.2.1 :003 > x.add_interest(10)
 => "Your interest rate to be added is $22. Call balance to see updated balance." 
2.2.1 :004 > x = BankAccount::SavingsAccount.new(100,20)
 => #<BankAccount::SavingsAccount:0x007ff3030a25f0 @id=100, @balance=20> 
2.2.1 :005 > x.add_interest(10)
 => "Your interest rate to be added is $2. Call balance to see updated balance." 
2.2.1 :006 > x.balance
 => 22 
2.2.1 :007 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007ff3030789d0 @id=100, @balance=200> 
2.2.1 :008 > x.add_interest(10)
 => "Your interest rate to be added is $22. Call balance to see updated balance." 
2.2.1 :009 > x.balance
 => 220 
2.2.1 :010 > x = BankAccount::SavingsAccount.new(100,300)
 => #<BankAccount::SavingsAccount:0x007ff3030533b0 @id=100, @balance=300> 
2.2.1 :011 > x.add_interest(10)
 => "Your interest rate to be added is $33. Call balance to see updated balance." 
2.2.1 :012 > x = BankAccount::SavingsAccount.new(100,500)
 => #<BankAccount::SavingsAccount:0x007ff30302b270 @id=100, @balance=500> 
2.2.1 :013 > x.add_interest(10)
 => "Your interest rate to be added is $55. Call balance to see updated balance." 
2.2.1 :014 > x.balance
 => 550 
2.2.1 :015 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > x = BankAccount::SavingsAccount.new(100,300)
NameError: uninitialized constant BankAccount
	from (irb):1
	from /Users/Wang/.rvm/rubies/ruby-2.2.1/bin/irb:11:in `<main>'
2.2.1 :002 > load 'bank_account.rb'
 => true 
2.2.1 :003 > x = BankAccount::SavingsAccount.new(100,300)
 => #<BankAccount::SavingsAccount:0x007fe023879640 @id=100, @balance=300> 
2.2.1 :004 > x.add_interest(10)
 => 33 
2.2.1 :005 > x.add_interest(0.10)
 => 0.33033 
2.2.1 :006 > x = BankAccount::SavingsAccount.new(100,300)
 => #<BankAccount::SavingsAccount:0x007fe0238481a8 @id=100, @balance=300> 
2.2.1 :007 > x.add_interest(0.10)
 => 0.3003 
2.2.1 :008 > x.balance
 => 300.3 
2.2.1 :009 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007fe02381a168 @id=100, @balance=200> 
2.2.1 :010 > x.add_interest(0.10)
 => 0.2002 
2.2.1 :011 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007fe0229107f8 @id=100, @balance=200> 
2.2.1 :012 > x.add_interest(0.10)
 => 0.2002 
2.2.1 :013 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007f884305c350 @id=100, @balance=200> 
2.2.1 :003 > x.add_interest(0.25)
 => "Your interest rate to be added is $0.50125. Call balance to see updated balance." 
2.2.1 :004 > x.balance
 => 200.5 
2.2.1 :005 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance

Finished in 0.00717 seconds (files took 0.12758 seconds to load)
17 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance (FAILED - 1)

Failures:

  1) BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance
     Failure/Error: expect(new_account200.add_interest(0.25)).to eq("Your interest rate to be added is $0.50125. Call balance to see updated balance.")
       
       expected: "Your interest rate to be added is $0.50125. Call balance to see updated balance."
            got: 0.50125
       
       (compared using ==)
     # ./spec/lib/savings_account_spec.rb:62:in `block (2 levels) in <top (required)>'

Finished in 0.00939 seconds (files took 0.13093 seconds to load)
17 examples, 1 failure

Failed examples:

rspec ./spec/lib/savings_account_spec.rb:61 # BankAccount::SavingsAccount returns the interest from balance & returns new balance when calling balance

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance

Finished in 0.00703 seconds (files took 0.10952 seconds to load)
17 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> cd lib
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> irb
2.2.1 :001 > load 'bank_account.rb'
 => true 
2.2.1 :002 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007ff1e18359c0 @id=100, @balance=200> 
2.2.1 :003 > x.add_interest(10)
Your interest rate to be added is $22. Call balance to see updated balance.
 => 22 
2.2.1 :004 > x.add_interest(10.0)
Your interest rate to be added is $24.2. Call balance to see updated balance.
 => 24.2 
2.2.1 :005 > x = BankAccount::SavingsAccount.new(100,200)
 => #<BankAccount::SavingsAccount:0x007ff1e0893e40 @id=100, @balance=200> 
2.2.1 :006 > x.add_interest(10.0)
Your interest rate to be added is $22.0. Call balance to see updated balance.
 => 22.0 
2.2.1 :007 > quit
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> rspec -fd
No examples found.

Finished in 0.00029 seconds (files took 0.06041 seconds to load)
0 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts/lib --> cd ..
Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> rspec -fd

BankAccount::Account
  responds to class method called new
  expects initial balance to equal current balance
  creates Account & passes parameters correctly
  raises ArgumentError for initial balance below 0
  withdraws correctly
  can't withdraw more than your current balance & returns unmodified balance
  deposits correctly
  returns the current balance after each withdraw or deposit

BankAccount::SavingsAccount
  responds to class method called new
  expects initial SA balance to equal current balance
  creates Savings Account & passes parameters correctly
  raises ArgumentError for initial SA balance below 10
  withdraws correctly with transaction fee
  if balance goes below 10 with withdrawal, returns unmodified balance
  deposits to SA correctly by inheriting method from Account base class
  returns the current balance after each withdrawal/deposit
  returns the interest from balance & returns new balance when calling balance

Finished in 0.00535 seconds (files took 0.1374 seconds to load)
17 examples, 0 failures

Wang🍄 ~/ada/projects/projects-forks/C3Projects--BankAccounts --> 
